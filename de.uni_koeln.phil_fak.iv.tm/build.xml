<!-- 
Material for the course 'Text-Mining', University of Cologne.
(http://www.spinfo.phil-fak.uni-koeln.de/spinfo-textmining.html)

Copyright (C) 2008-2009 Fabian Steeg

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along with
this program; if not, see <http://www.gnu.org/licenses/>.
-->

<!-- Text mining, final session: CRISP builds with Ant: 
	 compile, deploy, document, and test the code -->

<project name="tm" default="deploy">

	<!-- Folders: the existing project setup -->
	<property name="src.dir" location="src" />
	<property name="lib.dir" location="lib" />
	<!-- Folders: generated and cleaned by script -->
	<property name="doc.dir" location="doc" />
	<property name="build.dir" location="build" />
	<property name="build.classes.dir" location="${build.dir}/classes" />
	<property name="build.dist.dir" location="." />
	<property name="jar.file" location="${build.dist.dir}/tm.jar" />
	<property name="tests.dir" location="${build.dir}/tests" />
	<property name="tests.reports.dir" location="${tests.dir}/reports" />
	<property name="tests.summary.dir" location="${tests.dir}/summary" />

	<!-- Java version config: -->
	<property name="ant.java.version" value="1.5" />

	<!-- The classpath: where the classes and libs are to be found -->
	<path id="project.classpath">
		<pathelement location="${build.classes.dir}" />
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- Complete deployment: build Jar and Jacadocs -->
	<target name="deploy" depends="jar, doc" />

	<!-- Prepare the build: create folders -->
	<target name="prepare">
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${build.dist.dir}" />
		<mkdir dir="${doc.dir}" />
		<mkdir dir="${tests.reports.dir}" />
		<mkdir dir="${tests.summary.dir}" />
	</target>

	<!-- Delete the generated files and folders -->
	<target name="clean">
		<delete includeemptydirs="true">
			<fileset dir="${build.dir}" />
			<fileset dir="${doc.dir}" />
		</delete>
	</target>

	<!-- Compile source files -->
	<target name="compile" depends="prepare">
		<javac srcdir="${src.dir}" destdir="${build.classes.dir}">
			<classpath refid="project.classpath" />
		</javac>
	</target>

	<!-- Build a distribution jar-->
	<target name="jar" depends="compile">
		<!-- We deplaoy to the project root, so we can reuse the existing classpath setup: -->
		<manifestclasspath property="jar.classpath" jarfile="${jar.file}">
			<classpath refid="project.classpath" />
		</manifestclasspath>
		<jar destfile="${jar.file}" basedir="${build.classes.dir}">
			<manifest>
				<attribute name="Main-Class" value="de.uni_koeln.phil_fak.iv.tm.All" />
				<!-- And add it to the manifest to make the Jars available when running: -->
				<attribute name="Class-Path" value="${jar.classpath}" />
			</manifest>
		</jar>
	</target>

	<!-- Generate javadoc documentation-->
	<target name="doc" depends="compile">
		<!-- the classpathref is an important detail here; without it we hit this bug: 
			 http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6442982 -->
		<javadoc classpathref="project.classpath" sourcepath="${src.dir}" destdir="${doc.dir}" />
	</target>

	<!-- Run the tests -->
	<target name="test" depends="compile">
		<junit haltonfailure="no" printsummary="true">
			<classpath refid="project.classpath" />
			<batchtest todir="${tests.reports.dir}">
				<formatter type="xml" />
				<!--We run only the suites containing 'Praxis' in their name-->
				<fileset dir="${build.classes.dir}" includes="**/*Praxis*.class" />
			</batchtest>
		</junit>
	</target>

	<!-- Report the tests -->
	<target name="report" depends="test">
		<!-- collect the results into a summary report -->
		<junitreport todir="${tests.summary.dir}">
			<fileset dir="${tests.reports.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${tests.summary.dir}" />
		</junitreport>
		<echo message="Wrote summary test report to: ${tests.summary.dir}" />
	</target>

</project>